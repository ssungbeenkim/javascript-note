/* 
C언어는 개발자가 직접 메모리 관리를 해야 한다. 
C#, GO, Java, JS는 GC가 메모리 청소를 담당한다. 

GC는 자바스크립트 엔진 백그라운드에서 동작하며 어플리케이션이 바쁘지 않을 때 메모리를 감시하고 확인하며 동작한다. 

변수에 오브젝트를 할당하면 오브젝트는 hip이라는 공간에 저장이 되고, 
변수가 가리키는 메모리에서는 오브젝트가 저장된 메모리 주소를 가리킨다. 
변수에 다시 null을 할상하게 되면 오브젝트를 참조하는 변수가 없으므로 GC에 의해 제거대상이 된다. 


// 가급적 메모리는 필요한 곳에서 선언하고 쓰는 것이 좋다. 
*/
// 글로벌하게 선언된 변수는 앱이 종료될때까지 계속 메모리에 유지된다.
const global = 1;

// 블럭 내부에서만 존재하고, 블럭이 끝나면 자동으로 GC에 의해 청소된다.
{
  const local = 1;
}

function print() {
  // 함수 내부에서도 블럭안에서 필요한 경우에는
  // 필요한 함수 블럭 안에서 변수를 선언하고 사용해야 함
  if (true) {
    let temp = 0;
  }
}

/* 
실행 컨텍스트 스택에서는 코드의 실행 순서와 스코프를 기억한다. 
각각의 블록은 렉시컬 환경이라는 내부 오브젝트를 가지고 있다. 
렉시컬 환경에서는 환경레코드와 외부환경참조라는 것을 가지고 있다. 
환경레코드에서는 블럭 내부의 환경을 기억하고, 
외부환경참조에서는 외부의 환경 레코드를 기억한다. 
이렇게 스코프가 연결되어 있는 것을 스코프 체인이라고 한다. 

-> 메모리 절약 뿐 아니라 성능을 위해서도 변수는 최대한 필요한 곳에서 정의해야 한다. 
*/
